# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Board implements Node {
  id: ID!
  title: String!
  createdAt: DateTime!
  positionIndex: Int!
  owner(where: UserWhereInput): User!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List!]
}

type Card implements Node {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  dueDate: DateTime
  status: String
  list(where: ListWhereInput): List!
}

type List implements Node {
  id: ID!
  title: String!
  createdAt: DateTime!
  positionIndex: Int!
  board(where: BoardWhereInput): Board!
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card!]
  cardPositionIndexes: [Int!]
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board!]
}


#
# Other Types
#

type AggregateBoard {
  count: Int!
}

type AggregateCard {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BoardConnection {
  pageInfo: PageInfo!
  edges: [BoardEdge]!
  aggregate: AggregateBoard!
}

input BoardCreateInput {
  title: String!
  positionIndex: Int!
  owner: UserCreateOneWithoutBoardsInput!
  lists: ListCreateManyWithoutBoardInput
}

input BoardCreateManyWithoutOwnerInput {
  create: [BoardCreateWithoutOwnerInput!]
  connect: [BoardWhereUniqueInput!]
}

input BoardCreateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
}

input BoardCreateWithoutListsInput {
  title: String!
  positionIndex: Int!
  owner: UserCreateOneWithoutBoardsInput!
}

input BoardCreateWithoutOwnerInput {
  title: String!
  positionIndex: Int!
  lists: ListCreateManyWithoutBoardInput
}

type BoardEdge {
  node: Board!
  cursor: String!
}

enum BoardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  positionIndex_ASC
  positionIndex_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BoardPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  positionIndex: Int!
}

type BoardSubscriptionPayload {
  mutation: MutationType!
  node: Board
  updatedFields: [String!]
  previousValues: BoardPreviousValues
}

input BoardSubscriptionWhereInput {
  AND: [BoardSubscriptionWhereInput!]
  OR: [BoardSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BoardWhereInput
}

input BoardUpdateInput {
  title: String
  positionIndex: Int
  owner: UserUpdateOneWithoutBoardsInput
  lists: ListUpdateManyWithoutBoardInput
}

input BoardUpdateManyWithoutOwnerInput {
  create: [BoardCreateWithoutOwnerInput!]
  connect: [BoardWhereUniqueInput!]
  disconnect: [BoardWhereUniqueInput!]
  delete: [BoardWhereUniqueInput!]
  update: [BoardUpdateWithoutOwnerInput!]
  upsert: [BoardUpsertWithoutOwnerInput!]
}

input BoardUpdateOneWithoutListsInput {
  create: BoardCreateWithoutListsInput
  connect: BoardWhereUniqueInput
  disconnect: BoardWhereUniqueInput
  delete: BoardWhereUniqueInput
  update: BoardUpdateWithoutListsInput
  upsert: BoardUpsertWithoutListsInput
}

input BoardUpdateWithoutListsDataInput {
  title: String
  positionIndex: Int
  owner: UserUpdateOneWithoutBoardsInput
}

input BoardUpdateWithoutListsInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutListsDataInput!
}

input BoardUpdateWithoutOwnerDataInput {
  title: String
  positionIndex: Int
  lists: ListUpdateManyWithoutBoardInput
}

input BoardUpdateWithoutOwnerInput {
  where: BoardWhereUniqueInput!
  data: BoardUpdateWithoutOwnerDataInput!
}

input BoardUpsertWithoutListsInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutListsDataInput!
  create: BoardCreateWithoutListsInput!
}

input BoardUpsertWithoutOwnerInput {
  where: BoardWhereUniqueInput!
  update: BoardUpdateWithoutOwnerDataInput!
  create: BoardCreateWithoutOwnerInput!
}

input BoardWhereInput {
  AND: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  positionIndex: Int
  positionIndex_not: Int
  positionIndex_in: [Int!]
  positionIndex_not_in: [Int!]
  positionIndex_lt: Int
  positionIndex_lte: Int
  positionIndex_gt: Int
  positionIndex_gte: Int
  owner: UserWhereInput
  lists_every: ListWhereInput
  lists_some: ListWhereInput
  lists_none: ListWhereInput
}

input BoardWhereUniqueInput {
  id: ID
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  title: String!
  description: String
  dueDate: DateTime
  status: String
  list: ListCreateOneWithoutCardsInput!
}

input CardCreateManyWithoutListInput {
  create: [CardCreateWithoutListInput!]
  connect: [CardWhereUniqueInput!]
}

input CardCreateWithoutListInput {
  title: String!
  description: String
  dueDate: DateTime
  status: String
}

type CardEdge {
  node: Card!
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  dueDate_ASC
  dueDate_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CardPreviousValues {
  id: ID!
  title: String!
  description: String
  createdAt: DateTime!
  dueDate: DateTime
  status: String
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
}

input CardUpdateInput {
  title: String
  description: String
  dueDate: DateTime
  status: String
  list: ListUpdateOneWithoutCardsInput
}

input CardUpdateManyWithoutListInput {
  create: [CardCreateWithoutListInput!]
  connect: [CardWhereUniqueInput!]
  disconnect: [CardWhereUniqueInput!]
  delete: [CardWhereUniqueInput!]
  update: [CardUpdateWithoutListInput!]
  upsert: [CardUpsertWithoutListInput!]
}

input CardUpdateWithoutListDataInput {
  title: String
  description: String
  dueDate: DateTime
  status: String
}

input CardUpdateWithoutListInput {
  where: CardWhereUniqueInput!
  data: CardUpdateWithoutListDataInput!
}

input CardUpsertWithoutListInput {
  where: CardWhereUniqueInput!
  update: CardUpdateWithoutListDataInput!
  create: CardCreateWithoutListInput!
}

input CardWhereInput {
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  dueDate: DateTime
  dueDate_not: DateTime
  dueDate_in: [DateTime!]
  dueDate_not_in: [DateTime!]
  dueDate_lt: DateTime
  dueDate_lte: DateTime
  dueDate_gt: DateTime
  dueDate_gte: DateTime
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  list: ListWhereInput
}

input CardWhereUniqueInput {
  id: ID
}

scalar DateTime

type ListConnection {
  pageInfo: PageInfo!
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreatecardPositionIndexesInput {
  set: [Int!]
}

input ListCreateInput {
  title: String!
  positionIndex: Int!
  cardPositionIndexes: ListCreatecardPositionIndexesInput
  board: BoardCreateOneWithoutListsInput!
  cards: CardCreateManyWithoutListInput
}

input ListCreateManyWithoutBoardInput {
  create: [ListCreateWithoutBoardInput!]
  connect: [ListWhereUniqueInput!]
}

input ListCreateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutBoardInput {
  title: String!
  positionIndex: Int!
  cardPositionIndexes: ListCreatecardPositionIndexesInput
  cards: CardCreateManyWithoutListInput
}

input ListCreateWithoutCardsInput {
  title: String!
  positionIndex: Int!
  cardPositionIndexes: ListCreatecardPositionIndexesInput
  board: BoardCreateOneWithoutListsInput!
}

type ListEdge {
  node: List!
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  positionIndex_ASC
  positionIndex_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ListPreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
  positionIndex: Int!
  cardPositionIndexes: [Int!]
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  AND: [ListSubscriptionWhereInput!]
  OR: [ListSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ListWhereInput
}

input ListUpdatecardPositionIndexesInput {
  set: [Int!]
}

input ListUpdateInput {
  title: String
  positionIndex: Int
  cardPositionIndexes: ListUpdatecardPositionIndexesInput
  board: BoardUpdateOneWithoutListsInput
  cards: CardUpdateManyWithoutListInput
}

input ListUpdateManyWithoutBoardInput {
  create: [ListCreateWithoutBoardInput!]
  connect: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  update: [ListUpdateWithoutBoardInput!]
  upsert: [ListUpsertWithoutBoardInput!]
}

input ListUpdateOneWithoutCardsInput {
  create: ListCreateWithoutCardsInput
  connect: ListWhereUniqueInput
  disconnect: ListWhereUniqueInput
  delete: ListWhereUniqueInput
  update: ListUpdateWithoutCardsInput
  upsert: ListUpsertWithoutCardsInput
}

input ListUpdateWithoutBoardDataInput {
  title: String
  positionIndex: Int
  cardPositionIndexes: ListUpdatecardPositionIndexesInput
  cards: CardUpdateManyWithoutListInput
}

input ListUpdateWithoutBoardInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutBoardDataInput!
}

input ListUpdateWithoutCardsDataInput {
  title: String
  positionIndex: Int
  cardPositionIndexes: ListUpdatecardPositionIndexesInput
  board: BoardUpdateOneWithoutListsInput
}

input ListUpdateWithoutCardsInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutCardsDataInput!
}

input ListUpsertWithoutBoardInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutBoardDataInput!
  create: ListCreateWithoutBoardInput!
}

input ListUpsertWithoutCardsInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutCardsDataInput!
  create: ListCreateWithoutCardsInput!
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  positionIndex: Int
  positionIndex_not: Int
  positionIndex_in: [Int!]
  positionIndex_not_in: [Int!]
  positionIndex_lt: Int
  positionIndex_lte: Int
  positionIndex_gt: Int
  positionIndex_gte: Int
  board: BoardWhereInput
  cards_every: CardWhereInput
  cards_some: CardWhereInput
  cards_none: CardWhereInput
}

input ListWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCard(data: CardCreateInput!): Card!
  createList(data: ListCreateInput!): List!
  createBoard(data: BoardCreateInput!): Board!
  createUser(data: UserCreateInput!): User!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateBoard(data: BoardUpdateInput!, where: BoardWhereUniqueInput!): Board
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteList(where: ListWhereUniqueInput!): List
  deleteBoard(where: BoardWhereUniqueInput!): Board
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  upsertBoard(where: BoardWhereUniqueInput!, create: BoardCreateInput!, update: BoardUpdateInput!): Board!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCards(data: CardUpdateInput!, where: CardWhereInput!): BatchPayload!
  updateManyLists(data: ListUpdateInput!, where: ListWhereInput!): BatchPayload!
  updateManyBoards(data: BoardUpdateInput!, where: BoardWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyCards(where: CardWhereInput!): BatchPayload!
  deleteManyLists(where: ListWhereInput!): BatchPayload!
  deleteManyBoards(where: BoardWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  boards(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Board]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  card(where: CardWhereUniqueInput!): Card
  list(where: ListWhereUniqueInput!): List
  board(where: BoardWhereUniqueInput!): Board
  user(where: UserWhereUniqueInput!): User
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  boardsConnection(where: BoardWhereInput, orderBy: BoardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BoardConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  board(where: BoardSubscriptionWhereInput): BoardSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  boards: BoardCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutBoardsInput {
  create: UserCreateWithoutBoardsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBoardsInput {
  name: String!
  email: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  boards: BoardUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutBoardsInput {
  create: UserCreateWithoutBoardsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutBoardsInput
  upsert: UserUpsertWithoutBoardsInput
}

input UserUpdateWithoutBoardsDataInput {
  name: String
  email: String
}

input UserUpdateWithoutBoardsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutBoardsDataInput!
}

input UserUpsertWithoutBoardsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutBoardsDataInput!
  create: UserCreateWithoutBoardsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  boards_every: BoardWhereInput
  boards_some: BoardWhereInput
  boards_none: BoardWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
